import Head from 'next/head';
import { gql } from 'graphql-request';

import graphQLClient from '../graphql-client';

import Layout from '../src/components/Layout';
import { Box, Divider, Paper, Typography } from '@mui/material';
import Project from '../src/components/Project';

import { ApolloClient, createHttpLink, InMemoryCache } from "@apollo/client";
import { setContext } from '@apollo/client/link/context';
import { github } from '../src/useGitHubQuery';
import Repo from '../src/components/Repo';

export default function Home({allProjects, pinnedItems}) {

  console.log('Pinned Repos', pinnedItems);
  console.log('All Projects', allProjects.allProjects);
  const recentWork = allProjects.allProjects.filter(project => project.recentWork);
 
  return (
    <>
      <Head>
        <title>Aimee Tacchi Portfolio 2022</title>
        <meta name="description" content="Aimee Tacchi Portfolio Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
      <Paper sx={{height: '100%'}}>
        <Box sx={{ marginLeft: '89px' }}>
        <Typography mt={2} mb={2} variant="h2">Pinned Repos</Typography>
        <Divider />
        <Box mt={2} mb={2} sx={{ display: 'flex', gap: 3, flexWrap: 'wrap'}}>

          {pinnedItems.map(repo => (
            <Repo key={repo.id} repo={repo} />
          ))}
        </Box>

        <Divider/>
        <Typography mt={2} mb={2} variant="h2">Recent Work</Typography>
        <Box mt={2} sx={{ display: 'flex', gap: 3, flexWrap: 'wrap'}}>
          {recentWork.map(project => (
            <Project key={project.id} project={project} />
          ))}
        </Box>
        </Box>
      </Paper>
      </Layout>
    </>
  );
}

const query = gql`
    query {
        allProjects {
            id
            name
            slug
            description
            excerpt
            link
            tech
            recentWork
            coverImage {
                id
                responsiveImage(imgixParams: { fit: crop, w: 300, h: 300, auto: format }) {
                    srcSet
                    webpSrcSet
                    sizes
                    src
                    width
                    height
                    aspectRatio
                    alt
                    title
                    base64
                }
            }
        }
    }
`;

export async function getServerSideProps() {

  const allProjects = await graphQLClient.request(query);

  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });
  
  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,
      }
    }
  });
  
  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  });

  const { loading, error, data} = await client.query({query: github});
  const { user } = data;
  const pinnedItems = user.pinnedItems.edges.map(edge => edge.node);

  return {
    props: { allProjects, pinnedItems }
  };
}


